{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","hasValidationIssues","useState","Math","random","toFixed","slice","id","touched","setTouched","validated","setValidated","hasError","hasValidationIssue","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","titleValidationIssues","test","trim","urlsValidationIssues","url","RegExp","imdbIdValidationIssues","match","isEmptyFields","handleChange","prevMovie","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7df0e8b0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  hasValidationIssues?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  hasValidationIssues = () => false,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidationIssue = validated && hasValidationIssues(value);\n\n  const handleBlur = () => {\n    setTouched(true);\n    if (value) {\n      setValidated(true);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event);\n    if (!event.target.value) {\n      setValidated(false);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasValidationIssue,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidationIssue && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const titleValidationIssues = (value: string) : boolean => {\n    const pattern = /^[A-Z0-9].{1,}$/;\n\n    return !pattern.test(value.trim());\n  };\n\n  const urlsValidationIssues = (url: string) : boolean => {\n    const pattern = new RegExp(\n      '^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:[-;:&=+$,\\\\w]+@)?[A-Za-z0-9.-]+|'\n      + '(?:www\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)'\n      + '((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:[-+=&;%@,.\\\\w_]*)#?'\n      + '(?:[,.!/\\\\\\\\\\\\w]*))?)$',\n    );\n\n    return !pattern.test(url.trim());\n  };\n\n  const imdbIdValidationIssues = (id: string) : boolean => {\n    const pattern = /[A-Za-z]{2}\\d{5,}/;\n    const match = newMovie.imdbUrl.match(pattern);\n\n    if (match && match[0]) {\n      return match[0] !== id;\n    }\n\n    return true;\n  };\n\n  const isEmptyFields = !newMovie.title\n    || !newMovie.imgUrl\n    || !newMovie.imdbUrl\n    || !newMovie.imdbId;\n\n  const hasValidationIssue = titleValidationIssues(newMovie.title)\n    || urlsValidationIssues(newMovie.imgUrl)\n    || imdbIdValidationIssues(newMovie.imdbId);\n\n  const handleReset = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isEmptyFields) {\n      return;\n    }\n\n    if (hasValidationIssue) {\n      return;\n    }\n\n    onAdd(newMovie);\n\n    setCount(currentCount => currentCount + 1);\n    handleReset();\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setNewMovie(prevMovie => ({ ...prevMovie, [name]: value }));\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={handleChange}\n        hasValidationIssues={titleValidationIssues}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={handleChange}\n        hasValidationIssues={urlsValidationIssues}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={handleChange}\n        hasValidationIssues={urlsValidationIssues}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={handleChange}\n        hasValidationIssues={imdbIdValidationIssues}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isEmptyFields || hasValidationIssue}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}