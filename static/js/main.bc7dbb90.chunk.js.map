{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","hasValidationIssues","useState","Math","random","toFixed","slice","id","touched","setTouched","validated","setValidated","hasError","hasValidationIssue","handleChange","newValue","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setImgUrl","setImdbUrl","setImdbId","setDescription","urlsValidationIssues","url","RegExp","test","isEmptyFields","onSubmit","preventDefault","currentCount","match","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc7dbb90.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  hasValidationIssues?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  hasValidationIssues = () => false,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidationIssue = validated && hasValidationIssues(value);\n\n  const handleBlur = () => {\n    setTouched(true);\n    if (value) {\n      setValidated(true);\n    }\n  };\n\n  const handleChange = (newValue: string) => {\n    onChange(newValue);\n    if (!newValue) {\n      setValidated(false);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasValidationIssue,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => handleChange(event.target.value)}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidationIssue && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [description, setDescription] = useState('');\n\n  const titleValidationIssues = (value: string) : boolean => {\n    const pattern = /^[A-Z0-9].{1,}$/;\n\n    return !pattern.test(value);\n  };\n\n  const urlsValidationIssues = (url: string) : boolean => {\n    const pattern = new RegExp(\n      '^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:[-;:&=+$,\\\\w]+@)?[A-Za-z0-9.-]+|'\n      + '(?:www\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)'\n      + '((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:[-+=&;%@,.\\\\w_]*)#?'\n      + '(?:[,.!/\\\\\\\\\\\\w]*))?)$',\n    );\n\n    return !pattern.test(url);\n  };\n\n  const imdbIdValidationIssues = (id: string) : boolean => {\n    const pattern = /[A-Za-z]{2}\\d{5,}/;\n    const match = imdbUrl.match(pattern);\n\n    if (match && match[0]) {\n      return id !== match[0];\n    }\n\n    return true;\n  };\n\n  const isEmptyFields = !title || !imgUrl || !imdbUrl || !imdbId;\n\n  const handleReset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isEmptyFields) {\n      return;\n    }\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setCount(currentCount => currentCount + 1);\n    handleReset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        hasValidationIssues={titleValidationIssues}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        hasValidationIssues={urlsValidationIssues}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        hasValidationIssues={urlsValidationIssues}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        hasValidationIssues={imdbIdValidationIssues}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            {...{ disabled: isEmptyFields }}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}